// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServiceBus.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Description of topic resource.
    /// </summary>
    [JsonTransformation]
    public partial class TopicResource : Resource
    {
        /// <summary>
        /// Initializes a new instance of the TopicResource class.
        /// </summary>
        public TopicResource() { }

        /// <summary>
        /// Initializes a new instance of the TopicResource class.
        /// </summary>
        public TopicResource(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), DateTime? accessedAt = default(DateTime?), string autoDeleteOnIdle = default(string), DateTime? createdAt = default(DateTime?), MessageCountDetails countDetails = default(MessageCountDetails), string defaultMessageTimeToLive = default(string), string duplicateDetectionHistoryTimeWindow = default(string), bool? enableBatchedOperations = default(bool?), bool? enableExpress = default(bool?), bool? enablePartitioning = default(bool?), long? maxSizeInMegabytes = default(long?), bool? requiresDuplicateDetection = default(bool?), long? sizeInBytes = default(long?), EntityStatus? status = default(EntityStatus?), int? subscriptionCount = default(int?), bool? supportOrdering = default(bool?), DateTime? updatedAt = default(DateTime?))
            : base(location, id, name, type, tags)
        {
            AccessedAt = accessedAt;
            AutoDeleteOnIdle = autoDeleteOnIdle;
            CreatedAt = createdAt;
            CountDetails = countDetails;
            DefaultMessageTimeToLive = defaultMessageTimeToLive;
            DuplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            EnableBatchedOperations = enableBatchedOperations;
            EnableExpress = enableExpress;
            EnablePartitioning = enablePartitioning;
            MaxSizeInMegabytes = maxSizeInMegabytes;
            RequiresDuplicateDetection = requiresDuplicateDetection;
            SizeInBytes = sizeInBytes;
            Status = status;
            SubscriptionCount = subscriptionCount;
            SupportOrdering = supportOrdering;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Last time the message was sent, or a request was received, for
        /// this topic.
        /// </summary>
        [JsonProperty(PropertyName = "properties.accessedAt")]
        public DateTime? AccessedAt { get; private set; }

        /// <summary>
        /// TimeSpan idle interval after which the topic is automatically
        /// deleted. The minimum duration is 5 minutes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoDeleteOnIdle")]
        public string AutoDeleteOnIdle { get; set; }

        /// <summary>
        /// Exact time the message was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdAt")]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.countDetails")]
        public MessageCountDetails CountDetails { get; private set; }

        /// <summary>
        /// Default message time to live value. This is the duration after
        /// which the message expires, starting from when the message is sent
        /// to Service Bus. This is the default value used when TimeToLive is
        /// not set on a message itself.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultMessageTimeToLive")]
        public string DefaultMessageTimeToLive { get; set; }

        /// <summary>
        /// TimeSpan structure that defines the duration of the duplicate
        /// detection history. The default value is 10 minutes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.duplicateDetectionHistoryTimeWindow")]
        public string DuplicateDetectionHistoryTimeWindow { get; set; }

        /// <summary>
        /// Value that indicates whether server-side batched operations are
        /// enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableBatchedOperations")]
        public bool? EnableBatchedOperations { get; set; }

        /// <summary>
        /// Value that indicates whether Express Entities are enabled. An
        /// express topic holds a message in memory temporarily before
        /// writing it to persistent storage.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableExpress")]
        public bool? EnableExpress { get; set; }

        /// <summary>
        /// Value that indicates whether the topic to be partitioned across
        /// multiple message brokers is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enablePartitioning")]
        public bool? EnablePartitioning { get; set; }

        /// <summary>
        /// Maximum size of the topic in megabytes, which is the size of the
        /// memory allocated for the topic.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxSizeInMegabytes")]
        public long? MaxSizeInMegabytes { get; set; }

        /// <summary>
        /// Value indicating if this topic requires duplicate detection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.requiresDuplicateDetection")]
        public bool? RequiresDuplicateDetection { get; set; }

        /// <summary>
        /// Size of the topic, in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sizeInBytes")]
        public long? SizeInBytes { get; private set; }

        /// <summary>
        /// Enumerates the possible values for the status of a messaging
        /// entity. Possible values include: 'Active', 'Creating',
        /// 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming',
        /// 'Restoring', 'SendDisabled', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public EntityStatus? Status { get; set; }

        /// <summary>
        /// Number of subscriptions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subscriptionCount")]
        public int? SubscriptionCount { get; private set; }

        /// <summary>
        /// Value that indicates whether the topic supports ordering.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportOrdering")]
        public bool? SupportOrdering { get; set; }

        /// <summary>
        /// The exact time the message was updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.updatedAt")]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
