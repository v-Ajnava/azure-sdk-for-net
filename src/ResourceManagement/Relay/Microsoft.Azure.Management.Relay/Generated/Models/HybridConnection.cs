// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Relay.Models
{
    using System.Linq;

    /// <summary>
    /// Description of HybridConnection Resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class HybridConnection : Resource
    {
        /// <summary>
        /// Initializes a new instance of the HybridConnection class.
        /// </summary>
        public HybridConnection() { }

        /// <summary>
        /// Initializes a new instance of the HybridConnection class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="createdAt">The time the HybridConnection was
        /// created.</param>
        /// <param name="updatedAt">The time the namespace was updated.</param>
        /// <param name="listenerCount">The number of listeners for this
        /// HybridConnection. min : 1 and max:25 supported</param>
        /// <param name="requiresClientAuthorization">true if client
        /// authorization is needed for this HybridConnection; otherwise,
        /// false.</param>
        /// <param name="userMetadata">usermetadata is a placeholder to store
        /// user-defined string data for the HybridConnection endpoint.e.g.
        /// it can be used to store  descriptive data, such as list of teams
        /// and their contact information also user-defined configuration
        /// settings can be stored.</param>
        /// <param name="path">The path of the HybridConnection.</param>
        public HybridConnection(string id = default(string), string name = default(string), string type = default(string), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), int? listenerCount = default(int?), bool? requiresClientAuthorization = default(bool?), string userMetadata = default(string), string path = default(string))
            : base(id, name, type)
        {
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ListenerCount = listenerCount;
            RequiresClientAuthorization = requiresClientAuthorization;
            UserMetadata = userMetadata;
            Path = path;
        }

        /// <summary>
        /// Gets the time the HybridConnection was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdAt")]
        public System.DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Gets the time the namespace was updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.updatedAt")]
        public System.DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets the number of listeners for this HybridConnection. min : 1
        /// and max:25 supported
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.listenerCount")]
        public int? ListenerCount { get; private set; }

        /// <summary>
        /// Gets or sets true if client authorization is needed for this
        /// HybridConnection; otherwise, false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requiresClientAuthorization")]
        public bool? RequiresClientAuthorization { get; set; }

        /// <summary>
        /// Gets or sets usermetadata is a placeholder to store user-defined
        /// string data for the HybridConnection endpoint.e.g. it can be used
        /// to store  descriptive data, such as list of teams and their
        /// contact information also user-defined configuration settings can
        /// be stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.userMetadata")]
        public string UserMetadata { get; set; }

        /// <summary>
        /// Gets or sets the path of the HybridConnection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.path")]
        public string Path { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ListenerCount > 25)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ListenerCount", 25);
            }
            if (this.ListenerCount < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ListenerCount", 1);
            }
        }
    }
}
