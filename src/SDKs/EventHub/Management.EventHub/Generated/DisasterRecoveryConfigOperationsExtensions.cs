// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.EventHub
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DisasterRecoveryConfigOperations.
    /// </summary>
    public static partial class DisasterRecoveryConfigOperationsExtensions
    {
            /// <summary>
            /// Gets all the Disaster Recovery in a Namespace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            public static IPage<ArmDisasterRecovery> ListByNamespace(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName)
            {
                return operations.ListByNamespaceAsync(resourceGroupName, namespaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the Disaster Recovery in a Namespace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ArmDisasterRecovery>> ListByNamespaceAsync(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByNamespaceWithHttpMessagesAsync(resourceGroupName, namespaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a new Disaster Recovery as a nested resource within a
            /// Namespace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create an Disaster Recovery resource.
            /// </param>
            public static ArmDisasterRecovery CreateOrUpdate(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName, ArmDisasterRecovery parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, namespaceName, disasterRecoveryName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a new Disaster Recovery as a nested resource within a
            /// Namespace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create an Disaster Recovery resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArmDisasterRecovery> CreateOrUpdateAsync(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName, ArmDisasterRecovery parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, disasterRecoveryName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an Event Hub from the specified Namespace and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            public static void Delete(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName)
            {
                operations.DeleteAsync(resourceGroupName, namespaceName, disasterRecoveryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an Event Hub from the specified Namespace and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, disasterRecoveryName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves Disaster Recovery config description via bith primary or
            /// secondary namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            public static ArmDisasterRecovery Get(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName)
            {
                return operations.GetAsync(resourceGroupName, namespaceName, disasterRecoveryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves Disaster Recovery config description via bith primary or
            /// secondary namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArmDisasterRecovery> GetAsync(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, namespaceName, disasterRecoveryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation stops replication from the Primary to the Secondary
            /// namespace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            public static void BreakPairing(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName)
            {
                operations.BreakPairingAsync(resourceGroupName, namespaceName, disasterRecoveryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation stops replication from the Primary to the Secondary
            /// namespace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BreakPairingAsync(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BreakPairingWithHttpMessagesAsync(resourceGroupName, namespaceName, disasterRecoveryName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates Secondary namespace role as primary and removes the role from the
            /// pervious primary namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            public static void FailOver(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName)
            {
                operations.FailOverAsync(resourceGroupName, namespaceName, disasterRecoveryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates Secondary namespace role as primary and removes the role from the
            /// pervious primary namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The Namespace name
            /// </param>
            /// <param name='disasterRecoveryName'>
            /// The Disaster Recovery name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FailOverAsync(this IDisasterRecoveryConfigOperations operations, string resourceGroupName, string namespaceName, string disasterRecoveryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FailOverWithHttpMessagesAsync(resourceGroupName, namespaceName, disasterRecoveryName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the Disaster Recovery in a Namespace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ArmDisasterRecovery> ListByNamespaceNext(this IDisasterRecoveryConfigOperations operations, string nextPageLink)
            {
                return operations.ListByNamespaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the Disaster Recovery in a Namespace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ArmDisasterRecovery>> ListByNamespaceNextAsync(this IDisasterRecoveryConfigOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByNamespaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
