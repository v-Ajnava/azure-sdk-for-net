// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.EventHub.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.EventHub;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ArchiveDescription
    {
        /// <summary>
        /// Initializes a new instance of the ArchiveDescription class.
        /// </summary>
        public ArchiveDescription()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ArchiveDescription class.
        /// </summary>
        /// <param name="enabled">A value that indicates whether archive
        /// description is enabled. </param>
        /// <param name="encoding">Enumerates the possible values for the
        /// encoding format of ArchiveDescription. Possible values include:
        /// 'Avro', 'AvroDeflate'</param>
        /// <param name="intervalInSeconds">Number of seconds to retain the
        /// events for this Event Hub, value should be 1 to 7 days</param>
        /// <param name="sizeLimitInBytes">Number of seconds to retain the
        /// events for this Event Hub, value should be 1 to 7 days</param>
        /// <param name="destination">Properties of Destination</param>
        public ArchiveDescription(bool? enabled = default(bool?), EncodingArchiveDescription? encoding = default(EncodingArchiveDescription?), int? intervalInSeconds = default(int?), int? sizeLimitInBytes = default(int?), Destination destination = default(Destination))
        {
            Enabled = enabled;
            Encoding = encoding;
            IntervalInSeconds = intervalInSeconds;
            SizeLimitInBytes = sizeLimitInBytes;
            Destination = destination;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a value that indicates whether archive description is
        /// enabled.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets enumerates the possible values for the encoding format
        /// of ArchiveDescription. Possible values include: 'Avro',
        /// 'AvroDeflate'
        /// </summary>
        [JsonProperty(PropertyName = "encoding")]
        public EncodingArchiveDescription? Encoding { get; set; }

        /// <summary>
        /// Gets or sets number of seconds to retain the events for this Event
        /// Hub, value should be 1 to 7 days
        /// </summary>
        [JsonProperty(PropertyName = "intervalInSeconds")]
        public int? IntervalInSeconds { get; set; }

        /// <summary>
        /// Gets or sets number of seconds to retain the events for this Event
        /// Hub, value should be 1 to 7 days
        /// </summary>
        [JsonProperty(PropertyName = "sizeLimitInBytes")]
        public int? SizeLimitInBytes { get; set; }

        /// <summary>
        /// Gets or sets properties of Destination
        /// </summary>
        [JsonProperty(PropertyName = "destination")]
        public Destination Destination { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IntervalInSeconds > 900)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "IntervalInSeconds", 900);
            }
            if (IntervalInSeconds < 60)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "IntervalInSeconds", 60);
            }
            if (SizeLimitInBytes > 10)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "SizeLimitInBytes", 10);
            }
            if (SizeLimitInBytes < 500)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "SizeLimitInBytes", 500);
            }
        }
    }
}
