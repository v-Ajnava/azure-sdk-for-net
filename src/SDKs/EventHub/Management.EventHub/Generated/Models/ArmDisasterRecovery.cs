// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.EventHub.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.EventHub;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Single item in List or Get DisasterRecovery operation
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ArmDisasterRecovery : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ArmDisasterRecovery class.
        /// </summary>
        public ArmDisasterRecovery()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ArmDisasterRecovery class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="provisioningState">Provisioning state of the disaster
        /// recovery</param>
        /// <param name="partnerNamespace">A value that indicates partner
        /// namespace </param>
        /// <param name="role">Enumerates the possible values for the encoding
        /// format of capture description. Possible values include:
        /// 'Unspecified', 'Primary', 'PrimaryNotReplicating',
        /// 'Secondary'</param>
        /// <param name="armDisasterRecoveryType">Enumerates the possible
        /// values for the encoding format of capture description. Possible
        /// values include: 'MetadataReplication', 'DataReplication'</param>
        /// <param name="lastSynced">Time of Last Synced</param>
        public ArmDisasterRecovery(string id = default(string), string name = default(string), string type = default(string), string provisioningState = default(string), string partnerNamespace = default(string), RoleDisasterRecovery? role = default(RoleDisasterRecovery?), ReplicationType? armDisasterRecoveryType = default(ReplicationType?), System.DateTime? lastSynced = default(System.DateTime?))
            : base(id, name, type)
        {
            ProvisioningState = provisioningState;
            PartnerNamespace = partnerNamespace;
            Role = role;
            ArmDisasterRecoveryType = armDisasterRecoveryType;
            LastSynced = lastSynced;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets provisioning state of the disaster recovery
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets a value that indicates partner namespace
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerNamespace")]
        public string PartnerNamespace { get; set; }

        /// <summary>
        /// Gets enumerates the possible values for the encoding format of
        /// capture description. Possible values include: 'Unspecified',
        /// 'Primary', 'PrimaryNotReplicating', 'Secondary'
        /// </summary>
        [JsonProperty(PropertyName = "properties.role")]
        public RoleDisasterRecovery? Role { get; private set; }

        /// <summary>
        /// Gets enumerates the possible values for the encoding format of
        /// capture description. Possible values include:
        /// 'MetadataReplication', 'DataReplication'
        /// </summary>
        [JsonProperty(PropertyName = "properties.type")]
        public ReplicationType? ArmDisasterRecoveryType { get; private set; }

        /// <summary>
        /// Gets time of Last Synced
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastSynced")]
        public System.DateTime? LastSynced { get; private set; }

    }
}
